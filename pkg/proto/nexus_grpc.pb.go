// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/nexus.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NexusService_RegisterEventStream_FullMethodName   = "/nexus.NexusService/RegisterEventStream"
	NexusService_RegisterFile_FullMethodName          = "/nexus.NexusService/RegisterFile"
	NexusService_RegisterDirectory_FullMethodName     = "/nexus.NexusService/RegisterDirectory"
	NexusService_RegisterDatabaseTable_FullMethodName = "/nexus.NexusService/RegisterDatabaseTable"
	NexusService_StoreValue_FullMethodName            = "/nexus.NexusService/StoreValue"
	NexusService_DeletePath_FullMethodName            = "/nexus.NexusService/DeletePath"
	NexusService_Subscribe_FullMethodName             = "/nexus.NexusService/Subscribe"
	NexusService_GetNode_FullMethodName               = "/nexus.NexusService/GetNode"
	NexusService_GetChildren_FullMethodName           = "/nexus.NexusService/GetChildren"
)

// NexusServiceClient is the client API for NexusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NexusService handles all publisher and consumer operations
type NexusServiceClient interface {
	// Publisher endpoints
	RegisterEventStream(ctx context.Context, in *RegisterEventStreamRequest, opts ...grpc.CallOption) (*RegisterEventStreamResponse, error)
	RegisterFile(ctx context.Context, in *RegisterFileRequest, opts ...grpc.CallOption) (*RegisterFileResponse, error)
	RegisterDirectory(ctx context.Context, in *RegisterDirectoryRequest, opts ...grpc.CallOption) (*RegisterDirectoryResponse, error)
	RegisterDatabaseTable(ctx context.Context, in *RegisterDatabaseTableRequest, opts ...grpc.CallOption) (*RegisterDatabaseTableResponse, error)
	StoreValue(ctx context.Context, in *StoreValueRequest, opts ...grpc.CallOption) (*StoreValueResponse, error)
	DeletePath(ctx context.Context, in *DeletePathRequest, opts ...grpc.CallOption) (*DeletePathResponse, error)
	// Consumer endpoints
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
	GetNode(ctx context.Context, in *GetPathRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	// Add this to the NexusService
	GetChildren(ctx context.Context, in *GetChildrenRequest, opts ...grpc.CallOption) (*GetChildrenResponse, error)
}

type nexusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNexusServiceClient(cc grpc.ClientConnInterface) NexusServiceClient {
	return &nexusServiceClient{cc}
}

func (c *nexusServiceClient) RegisterEventStream(ctx context.Context, in *RegisterEventStreamRequest, opts ...grpc.CallOption) (*RegisterEventStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterEventStreamResponse)
	err := c.cc.Invoke(ctx, NexusService_RegisterEventStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) RegisterFile(ctx context.Context, in *RegisterFileRequest, opts ...grpc.CallOption) (*RegisterFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterFileResponse)
	err := c.cc.Invoke(ctx, NexusService_RegisterFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) RegisterDirectory(ctx context.Context, in *RegisterDirectoryRequest, opts ...grpc.CallOption) (*RegisterDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterDirectoryResponse)
	err := c.cc.Invoke(ctx, NexusService_RegisterDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) RegisterDatabaseTable(ctx context.Context, in *RegisterDatabaseTableRequest, opts ...grpc.CallOption) (*RegisterDatabaseTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterDatabaseTableResponse)
	err := c.cc.Invoke(ctx, NexusService_RegisterDatabaseTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) StoreValue(ctx context.Context, in *StoreValueRequest, opts ...grpc.CallOption) (*StoreValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreValueResponse)
	err := c.cc.Invoke(ctx, NexusService_StoreValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) DeletePath(ctx context.Context, in *DeletePathRequest, opts ...grpc.CallOption) (*DeletePathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePathResponse)
	err := c.cc.Invoke(ctx, NexusService_DeletePath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NexusService_ServiceDesc.Streams[0], NexusService_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NexusService_SubscribeClient = grpc.ServerStreamingClient[Event]

func (c *nexusServiceClient) GetNode(ctx context.Context, in *GetPathRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, NexusService_GetNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) GetChildren(ctx context.Context, in *GetChildrenRequest, opts ...grpc.CallOption) (*GetChildrenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChildrenResponse)
	err := c.cc.Invoke(ctx, NexusService_GetChildren_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NexusServiceServer is the server API for NexusService service.
// All implementations must embed UnimplementedNexusServiceServer
// for forward compatibility.
//
// NexusService handles all publisher and consumer operations
type NexusServiceServer interface {
	// Publisher endpoints
	RegisterEventStream(context.Context, *RegisterEventStreamRequest) (*RegisterEventStreamResponse, error)
	RegisterFile(context.Context, *RegisterFileRequest) (*RegisterFileResponse, error)
	RegisterDirectory(context.Context, *RegisterDirectoryRequest) (*RegisterDirectoryResponse, error)
	RegisterDatabaseTable(context.Context, *RegisterDatabaseTableRequest) (*RegisterDatabaseTableResponse, error)
	StoreValue(context.Context, *StoreValueRequest) (*StoreValueResponse, error)
	DeletePath(context.Context, *DeletePathRequest) (*DeletePathResponse, error)
	// Consumer endpoints
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[Event]) error
	GetNode(context.Context, *GetPathRequest) (*GetNodeResponse, error)
	// Add this to the NexusService
	GetChildren(context.Context, *GetChildrenRequest) (*GetChildrenResponse, error)
	mustEmbedUnimplementedNexusServiceServer()
}

// UnimplementedNexusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNexusServiceServer struct{}

func (UnimplementedNexusServiceServer) RegisterEventStream(context.Context, *RegisterEventStreamRequest) (*RegisterEventStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEventStream not implemented")
}
func (UnimplementedNexusServiceServer) RegisterFile(context.Context, *RegisterFileRequest) (*RegisterFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFile not implemented")
}
func (UnimplementedNexusServiceServer) RegisterDirectory(context.Context, *RegisterDirectoryRequest) (*RegisterDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDirectory not implemented")
}
func (UnimplementedNexusServiceServer) RegisterDatabaseTable(context.Context, *RegisterDatabaseTableRequest) (*RegisterDatabaseTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDatabaseTable not implemented")
}
func (UnimplementedNexusServiceServer) StoreValue(context.Context, *StoreValueRequest) (*StoreValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreValue not implemented")
}
func (UnimplementedNexusServiceServer) DeletePath(context.Context, *DeletePathRequest) (*DeletePathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePath not implemented")
}
func (UnimplementedNexusServiceServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedNexusServiceServer) GetNode(context.Context, *GetPathRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedNexusServiceServer) GetChildren(context.Context, *GetChildrenRequest) (*GetChildrenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildren not implemented")
}
func (UnimplementedNexusServiceServer) mustEmbedUnimplementedNexusServiceServer() {}
func (UnimplementedNexusServiceServer) testEmbeddedByValue()                      {}

// UnsafeNexusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NexusServiceServer will
// result in compilation errors.
type UnsafeNexusServiceServer interface {
	mustEmbedUnimplementedNexusServiceServer()
}

func RegisterNexusServiceServer(s grpc.ServiceRegistrar, srv NexusServiceServer) {
	// If the following call pancis, it indicates UnimplementedNexusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NexusService_ServiceDesc, srv)
}

func _NexusService_RegisterEventStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEventStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).RegisterEventStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_RegisterEventStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).RegisterEventStream(ctx, req.(*RegisterEventStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_RegisterFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).RegisterFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_RegisterFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).RegisterFile(ctx, req.(*RegisterFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_RegisterDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).RegisterDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_RegisterDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).RegisterDirectory(ctx, req.(*RegisterDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_RegisterDatabaseTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDatabaseTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).RegisterDatabaseTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_RegisterDatabaseTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).RegisterDatabaseTable(ctx, req.(*RegisterDatabaseTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_StoreValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).StoreValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_StoreValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).StoreValue(ctx, req.(*StoreValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_DeletePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).DeletePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_DeletePath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).DeletePath(ctx, req.(*DeletePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NexusServiceServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NexusService_SubscribeServer = grpc.ServerStreamingServer[Event]

func _NexusService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).GetNode(ctx, req.(*GetPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_GetChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChildrenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).GetChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_GetChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).GetChildren(ctx, req.(*GetChildrenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NexusService_ServiceDesc is the grpc.ServiceDesc for NexusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NexusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nexus.NexusService",
	HandlerType: (*NexusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterEventStream",
			Handler:    _NexusService_RegisterEventStream_Handler,
		},
		{
			MethodName: "RegisterFile",
			Handler:    _NexusService_RegisterFile_Handler,
		},
		{
			MethodName: "RegisterDirectory",
			Handler:    _NexusService_RegisterDirectory_Handler,
		},
		{
			MethodName: "RegisterDatabaseTable",
			Handler:    _NexusService_RegisterDatabaseTable_Handler,
		},
		{
			MethodName: "StoreValue",
			Handler:    _NexusService_StoreValue_Handler,
		},
		{
			MethodName: "DeletePath",
			Handler:    _NexusService_DeletePath_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _NexusService_GetNode_Handler,
		},
		{
			MethodName: "GetChildren",
			Handler:    _NexusService_GetChildren_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _NexusService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/nexus.proto",
}
