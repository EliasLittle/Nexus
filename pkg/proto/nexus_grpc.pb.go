// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/nexus.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NexusService_RegisterEventStream_FullMethodName = "/nexus.NexusService/RegisterEventStream"
	NexusService_RegisterDataset_FullMethodName     = "/nexus.NexusService/RegisterDataset"
	NexusService_StoreValue_FullMethodName          = "/nexus.NexusService/StoreValue"
	NexusService_Subscribe_FullMethodName           = "/nexus.NexusService/Subscribe"
	NexusService_GetValue_FullMethodName            = "/nexus.NexusService/GetValue"
	NexusService_GetDataset_FullMethodName          = "/nexus.NexusService/GetDataset"
	NexusService_GetEventStream_FullMethodName      = "/nexus.NexusService/GetEventStream"
	NexusService_GetPathType_FullMethodName         = "/nexus.NexusService/GetPathType"
	NexusService_GetChildren_FullMethodName         = "/nexus.NexusService/GetChildren"
)

// NexusServiceClient is the client API for NexusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NexusService handles all publisher and consumer operations
type NexusServiceClient interface {
	// Publisher endpoints
	RegisterEventStream(ctx context.Context, in *RegisterEventStreamRequest, opts ...grpc.CallOption) (*RegisterEventStreamResponse, error)
	RegisterDataset(ctx context.Context, in *RegisterDatasetRequest, opts ...grpc.CallOption) (*RegisterDatasetResponse, error)
	StoreValue(ctx context.Context, in *StoreValueRequest, opts ...grpc.CallOption) (*StoreValueResponse, error)
	// Consumer endpoints
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
	GetValue(ctx context.Context, in *GetPathRequest, opts ...grpc.CallOption) (*GetValueResponse, error)
	GetDataset(ctx context.Context, in *GetPathRequest, opts ...grpc.CallOption) (*GetDatasetResponse, error)
	GetEventStream(ctx context.Context, in *GetPathRequest, opts ...grpc.CallOption) (*GetEventStreamResponse, error)
	GetPathType(ctx context.Context, in *GetPathRequest, opts ...grpc.CallOption) (*GetPathTypeResponse, error)
	// Add this to the NexusService
	GetChildren(ctx context.Context, in *GetChildrenRequest, opts ...grpc.CallOption) (*GetChildrenResponse, error)
}

type nexusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNexusServiceClient(cc grpc.ClientConnInterface) NexusServiceClient {
	return &nexusServiceClient{cc}
}

func (c *nexusServiceClient) RegisterEventStream(ctx context.Context, in *RegisterEventStreamRequest, opts ...grpc.CallOption) (*RegisterEventStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterEventStreamResponse)
	err := c.cc.Invoke(ctx, NexusService_RegisterEventStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) RegisterDataset(ctx context.Context, in *RegisterDatasetRequest, opts ...grpc.CallOption) (*RegisterDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterDatasetResponse)
	err := c.cc.Invoke(ctx, NexusService_RegisterDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) StoreValue(ctx context.Context, in *StoreValueRequest, opts ...grpc.CallOption) (*StoreValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreValueResponse)
	err := c.cc.Invoke(ctx, NexusService_StoreValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NexusService_ServiceDesc.Streams[0], NexusService_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NexusService_SubscribeClient = grpc.ServerStreamingClient[Event]

func (c *nexusServiceClient) GetValue(ctx context.Context, in *GetPathRequest, opts ...grpc.CallOption) (*GetValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetValueResponse)
	err := c.cc.Invoke(ctx, NexusService_GetValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) GetDataset(ctx context.Context, in *GetPathRequest, opts ...grpc.CallOption) (*GetDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDatasetResponse)
	err := c.cc.Invoke(ctx, NexusService_GetDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) GetEventStream(ctx context.Context, in *GetPathRequest, opts ...grpc.CallOption) (*GetEventStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventStreamResponse)
	err := c.cc.Invoke(ctx, NexusService_GetEventStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) GetPathType(ctx context.Context, in *GetPathRequest, opts ...grpc.CallOption) (*GetPathTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPathTypeResponse)
	err := c.cc.Invoke(ctx, NexusService_GetPathType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) GetChildren(ctx context.Context, in *GetChildrenRequest, opts ...grpc.CallOption) (*GetChildrenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChildrenResponse)
	err := c.cc.Invoke(ctx, NexusService_GetChildren_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NexusServiceServer is the server API for NexusService service.
// All implementations must embed UnimplementedNexusServiceServer
// for forward compatibility.
//
// NexusService handles all publisher and consumer operations
type NexusServiceServer interface {
	// Publisher endpoints
	RegisterEventStream(context.Context, *RegisterEventStreamRequest) (*RegisterEventStreamResponse, error)
	RegisterDataset(context.Context, *RegisterDatasetRequest) (*RegisterDatasetResponse, error)
	StoreValue(context.Context, *StoreValueRequest) (*StoreValueResponse, error)
	// Consumer endpoints
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[Event]) error
	GetValue(context.Context, *GetPathRequest) (*GetValueResponse, error)
	GetDataset(context.Context, *GetPathRequest) (*GetDatasetResponse, error)
	GetEventStream(context.Context, *GetPathRequest) (*GetEventStreamResponse, error)
	GetPathType(context.Context, *GetPathRequest) (*GetPathTypeResponse, error)
	// Add this to the NexusService
	GetChildren(context.Context, *GetChildrenRequest) (*GetChildrenResponse, error)
	mustEmbedUnimplementedNexusServiceServer()
}

// UnimplementedNexusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNexusServiceServer struct{}

func (UnimplementedNexusServiceServer) RegisterEventStream(context.Context, *RegisterEventStreamRequest) (*RegisterEventStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEventStream not implemented")
}
func (UnimplementedNexusServiceServer) RegisterDataset(context.Context, *RegisterDatasetRequest) (*RegisterDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDataset not implemented")
}
func (UnimplementedNexusServiceServer) StoreValue(context.Context, *StoreValueRequest) (*StoreValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreValue not implemented")
}
func (UnimplementedNexusServiceServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedNexusServiceServer) GetValue(context.Context, *GetPathRequest) (*GetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedNexusServiceServer) GetDataset(context.Context, *GetPathRequest) (*GetDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataset not implemented")
}
func (UnimplementedNexusServiceServer) GetEventStream(context.Context, *GetPathRequest) (*GetEventStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventStream not implemented")
}
func (UnimplementedNexusServiceServer) GetPathType(context.Context, *GetPathRequest) (*GetPathTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPathType not implemented")
}
func (UnimplementedNexusServiceServer) GetChildren(context.Context, *GetChildrenRequest) (*GetChildrenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildren not implemented")
}
func (UnimplementedNexusServiceServer) mustEmbedUnimplementedNexusServiceServer() {}
func (UnimplementedNexusServiceServer) testEmbeddedByValue()                      {}

// UnsafeNexusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NexusServiceServer will
// result in compilation errors.
type UnsafeNexusServiceServer interface {
	mustEmbedUnimplementedNexusServiceServer()
}

func RegisterNexusServiceServer(s grpc.ServiceRegistrar, srv NexusServiceServer) {
	// If the following call pancis, it indicates UnimplementedNexusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NexusService_ServiceDesc, srv)
}

func _NexusService_RegisterEventStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEventStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).RegisterEventStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_RegisterEventStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).RegisterEventStream(ctx, req.(*RegisterEventStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_RegisterDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).RegisterDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_RegisterDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).RegisterDataset(ctx, req.(*RegisterDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_StoreValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).StoreValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_StoreValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).StoreValue(ctx, req.(*StoreValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NexusServiceServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NexusService_SubscribeServer = grpc.ServerStreamingServer[Event]

func _NexusService_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).GetValue(ctx, req.(*GetPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_GetDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).GetDataset(ctx, req.(*GetPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_GetEventStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).GetEventStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_GetEventStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).GetEventStream(ctx, req.(*GetPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_GetPathType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).GetPathType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_GetPathType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).GetPathType(ctx, req.(*GetPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_GetChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChildrenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).GetChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_GetChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).GetChildren(ctx, req.(*GetChildrenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NexusService_ServiceDesc is the grpc.ServiceDesc for NexusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NexusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nexus.NexusService",
	HandlerType: (*NexusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterEventStream",
			Handler:    _NexusService_RegisterEventStream_Handler,
		},
		{
			MethodName: "RegisterDataset",
			Handler:    _NexusService_RegisterDataset_Handler,
		},
		{
			MethodName: "StoreValue",
			Handler:    _NexusService_StoreValue_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _NexusService_GetValue_Handler,
		},
		{
			MethodName: "GetDataset",
			Handler:    _NexusService_GetDataset_Handler,
		},
		{
			MethodName: "GetEventStream",
			Handler:    _NexusService_GetEventStream_Handler,
		},
		{
			MethodName: "GetPathType",
			Handler:    _NexusService_GetPathType_Handler,
		},
		{
			MethodName: "GetChildren",
			Handler:    _NexusService_GetChildren_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _NexusService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/nexus.proto",
}
